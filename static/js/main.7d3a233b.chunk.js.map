{"version":3,"sources":["theme.js","api/movies.js","components/search.js","components/movie.js","components/movies.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["theme","extendTheme","config","initialColorMode","useSystemColorMode","client","axios","create","baseURL","getMovies","currentPage","query","get","Search","loading","setQuery","liveSearch","useEffect","length","sendQuery","debounce","e","newQuery","target","value","width","pointerEvents","children","color","type","placeholder","onChange","hidden","isLoading","marginLeft","colorScheme","disabled","onClick","Movie","name","isNominated","id","year","nominateMovie","removeMovie","nominees","initialScale","in","borderWidth","borderRadius","backgroundColor","textColor","p","marginTop","alignItems","as","size","icon","Close","Check","Movies","localNominees","JSON","parse","localStorage","getItem","useState","movies","setMovies","setNominees","page","setPage","setLoading","totalResults","setTotalResults","currentPageStart","setCurrentPageStart","currentPageEnd","setCurrentPageEnd","setLiveSearch","toast","useToast","setItem","stringify","title","description","status","duration","isClosable","movieToNominate","find","movie","imdbID","Title","unnominateMovie","console","log","newNominees","removedNominee","remove","nominee","useCallback","apiGetMovies","then","res","data","columns","spacing","height","marginBottom","overflow","overflowX","overflowY","css","background","isLoaded","map","Year","movieToFind","parseInt","position","right","htmlFor","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7d3a233b.chunk.js","sourcesContent":["import { extendTheme } from '@chakra-ui/react';\n\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: 'dark',\n  useSystemColorMode: false,\n};\n\n// 3. extend the theme\nconst theme = extendTheme({ config });\n\nexport default theme;\n","import axios from 'axios';\nconst API_ENDPOINT = 'https://www.omdbapi.com';\nconst client = axios.create({ baseURL: `${API_ENDPOINT}` });\n\nexport function getMovies(currentPage, query) {\n  return client.get(\n    `https://www.omdbapi.com/?s=${query}&apikey=8eda12ed&page=${currentPage}&type=movie`\n  );\n}\n","import { Box, InputGroup, InputLeftElement, Input } from '@chakra-ui/react';\nimport { Button } from '@chakra-ui/react';\nimport { SearchIcon } from '@chakra-ui/icons';\nimport { debounce } from 'lodash';\nimport { useEffect } from 'react';\nfunction Search({ loading, getMovies, query, setQuery, liveSearch }) {\n  useEffect(() => {\n    if (liveSearch && query.length > 3) {\n      getMovies(1);\n    }\n  }, [query, liveSearch, getMovies]);\n\n  // only update search every 300 ms so use effect doesnt run\n  // every time an update is made to the search terms\n  const sendQuery = debounce(e => {\n    const newQuery = e.target.value;\n    setQuery(newQuery);\n  }, 300);\n\n  return (\n    <Box width=\"100%\">\n      <InputGroup>\n        <InputLeftElement\n          pointerEvents=\"none\"\n          children={<SearchIcon color=\"gray\" />}\n        />\n        <Input\n          type=\"text\"\n          placeholder=\"Title (4+ chars)\"\n          onChange={e => sendQuery(e)}\n        />\n        <Button\n          hidden={liveSearch}\n          isLoading={loading}\n          marginLeft={5}\n          colorScheme=\"green\"\n          disabled={query.length < 3}\n          onClick={() => getMovies(1)}\n        >\n          Search\n        </Button>\n      </InputGroup>\n    </Box>\n  );\n}\nexport default Search;\n","import { Box, Flex, Heading, IconButton, Spacer } from '@chakra-ui/react';\nimport { CheckIcon, CloseIcon } from '@chakra-ui/icons';\nimport { ScaleFade } from '@chakra-ui/react';\nfunction Movie({\n  name,\n  isNominated,\n  id,\n  year,\n  nominateMovie,\n  removeMovie,\n  nominees,\n}) {\n  const removeOrNominateMovie = () => {\n    if (nominees) {\n      removeMovie(id);\n    } else {\n      nominateMovie(id);\n    }\n  };\n\n  return (\n    <ScaleFade initialScale={0.9} in={true}>\n      <Box\n        borderWidth=\"1px\"\n        borderRadius=\"md\"\n        backgroundColor=\"white\"\n        textColor=\"black\"\n        p={5}\n        marginTop={6}\n        width=\"95%\"\n      >\n        <Flex alignItems=\"center\">\n          <Heading p={2} as=\"h4\" size=\"md\">\n            {name} ({year})\n          </Heading>\n          <Spacer />\n          <IconButton\n            colorScheme={nominees ? 'red' : 'green'}\n            icon={nominees ? <CloseIcon /> : <CheckIcon />}\n            disabled={!nominees && isNominated}\n            onClick={() => {\n              removeOrNominateMovie();\n            }}\n          />\n        </Flex>\n      </Box>\n    </ScaleFade>\n  );\n}\nexport default Movie;\n","import { useState, useEffect, useCallback } from 'react';\nimport { getMovies as apiGetMovies } from '../api/movies';\nimport Search from './search';\nimport find from 'lodash';\nimport remove from 'lodash';\nimport { useToast } from '@chakra-ui/react';\nimport { Skeleton } from '@chakra-ui/react';\n\nimport {\n  Box,\n  SimpleGrid,\n  Heading,\n  Center,\n  Flex,\n  Spacer,\n  Button,\n  FormLabel,\n  Text,\n  Switch,\n} from '@chakra-ui/react';\n\nimport Movie from './movie';\n\nfunction Movies() {\n  const localNominees = JSON.parse(localStorage.getItem('nominees')) || [];\n  const [movies, setMovies] = useState([]);\n  const [nominees, setNominees] = useState(localNominees);\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [totalResults, setTotalResults] = useState(0);\n  const [currentPageStart, setCurrentPageStart] = useState(0);\n  const [currentPageEnd, setCurrentPageEnd] = useState(0);\n  const [query, setQuery] = useState('');\n  const [liveSearch, setLiveSearch] = useState(false);\n\n  const toast = useToast();\n  //The Lord of the Rings: The\n\n  useEffect(() => {\n    localStorage.setItem('nominees', JSON.stringify(nominees));\n  }, [nominees]);\n\n  useEffect(() => {\n    setCurrentPageStart(10 * page - 9);\n    setCurrentPageEnd(10 * page - 10 + movies.length);\n  }, [page, movies]);\n\n  const nominateMovie = id => {\n    if (nominees.length === 5) {\n      toast({\n        title: 'No more nominations available.',\n        description: \"You've already nominated 5 movies!\",\n        status: 'error',\n        duration: 2000,\n        isClosable: true,\n      });\n    } else {\n      const movieToNominate = find(movies, function (movie) {\n        return movie.imdbID === id;\n      });\n      toast({\n        title: 'Nominee added.',\n        description:\n          \"You've added \" +\n          \"'\" +\n          movieToNominate.Title +\n          \"'\" +\n          ' to your nominations',\n        status: 'success',\n        duration: 2000,\n        isClosable: true,\n      });\n      setNominees([...nominees, movieToNominate]);\n    }\n  };\n\n  const unnominateMovie = id => {\n    console.log('unnominating');\n    const newNominees = [...nominees];\n    const removedNominee = remove(\n      newNominees,\n      nominee => nominee.imdbID === id\n    )[0];\n    console.log(removedNominee);\n    console.log(newNominees);\n    //const newNominees = filter(nominees, nominee => nominee.imdbID !== id);\n    setNominees([...newNominees]);\n\n    toast({\n      title: 'Nominee removed.',\n      description:\n        \"You've removed \" +\n        \"'\" +\n        removedNominee.Title +\n        \"'\" +\n        ' from your nominations',\n      status: 'success',\n      duration: 2000,\n      isClosable: true,\n    });\n  };\n\n  const getMovies = useCallback(\n    (currentPage = 1) => {\n      setLoading(true);\n      setPage(currentPage);\n      apiGetMovies(currentPage, query).then(res => {\n        console.log('QUERY THAT GETS SENT IS: ', query);\n        let movies = res.data.Search;\n        setTotalResults(res.data.totalResults);\n        if (movies) {\n          setMovies(movies);\n        } else {\n          toast({\n            title: 'No results found.',\n            description: \"Couldn't find any movies with that search criteria.\",\n            status: 'error',\n            duration: 2000,\n            isClosable: true,\n          });\n          setMovies([]);\n        }\n        setLoading(false);\n      });\n    },\n    [query, toast]\n  );\n\n  return (\n    <>\n      <Box width=\"100%\">\n        <Center>\n          <Box p={10} width=\"90%\">\n            <Search\n              loading={loading}\n              getMovies={getMovies}\n              query={query}\n              setQuery={setQuery}\n              liveSearch={liveSearch}\n            ></Search>\n            <SimpleGrid columns={[1, null, 2]} spacing={5}>\n              <Box height=\"80vh\" marginTop={5} marginBottom={5}>\n                <Heading marginTop={7} as=\"h2\" size=\"lg\">\n                  {movies.length > 0 &&\n                    !loading &&\n                    'Search results (' +\n                      currentPageStart +\n                      '-' +\n                      currentPageEnd +\n                      ' of ' +\n                      totalResults +\n                      ')'}\n                  {(movies.length === 0 || loading) && 'Movies'}\n                </Heading>\n                <Box\n                  height=\"70vh\"\n                  overflow=\"scroll\"\n                  overflowX=\"hidden\"\n                  overflowY=\"auto\"\n                  css={{\n                    '&::-webkit-scrollbar': {\n                      width: '4px',\n                    },\n                    '&::-webkit-scrollbar-track': {\n                      width: '6px',\n                    },\n                    '&::-webkit-scrollbar-thumb': {\n                      background: 'white',\n                      borderRadius: '24px',\n                    },\n                  }}\n                >\n                  <Skeleton isLoaded={!loading}>\n                    {movies.map(movie => (\n                      <Movie\n                        key={movie.imdbID}\n                        name={movie.Title}\n                        year={movie.Year}\n                        id={movie.imdbID}\n                        nominateMovie={nominateMovie}\n                        nominees={false}\n                        isNominated={find(nominees, function (movieToFind) {\n                          return movieToFind.imdbID === movie.imdbID;\n                        })}\n                      ></Movie>\n                    ))}\n                  </Skeleton>\n                </Box>\n                <Flex\n                  hidden={movies.length === 0}\n                  height=\"12vh\"\n                  alignItems=\"center\"\n                >\n                  <Button\n                    disabled={page === 1}\n                    colorScheme=\"green\"\n                    onClick={() => {\n                      getMovies(page - 1);\n                    }}\n                  >\n                    Back\n                  </Button>\n                  <Spacer />\n                  <Button\n                    disabled={currentPageEnd === parseInt(totalResults)}\n                    colorScheme=\"green\"\n                    onClick={() => {\n                      getMovies(page + 1);\n                    }}\n                  >\n                    Next\n                  </Button>\n                </Flex>\n              </Box>\n              <Box height=\"80vh\" marginTop={5} marginBottom={5}>\n                <Heading marginTop={7} as=\"h2\" size=\"lg\">\n                  My Nominations\n                </Heading>\n                <Box\n                  height=\"70vh\"\n                  overflow=\"scroll\"\n                  overflowX=\"hidden\"\n                  overflowY=\"auto\"\n                  css={{\n                    '&::-webkit-scrollbar': {\n                      width: '4px',\n                    },\n                    '&::-webkit-scrollbar-track': {\n                      width: '6px',\n                    },\n                    '&::-webkit-scrollbar-thumb': {\n                      background: 'white',\n                      borderRadius: '24px',\n                    },\n                  }}\n                >\n                  {nominees.map(movie => (\n                    <Movie\n                      key={movie.imdbID}\n                      name={movie.Title}\n                      year={movie.Year}\n                      id={movie.imdbID}\n                      isNominated\n                      nominees={true}\n                      removeMovie={unnominateMovie}\n                    ></Movie>\n                  ))}\n                </Box>\n                <Flex position=\"absolute\" right={5} alignItems=\"center\">\n                  <FormLabel htmlFor=\"live-search\">\n                    <Text> Live Search?</Text>\n                  </FormLabel>\n                  <Switch\n                    value={liveSearch}\n                    onChange={e => {\n                      setLiveSearch(!liveSearch);\n                    }}\n                    colorScheme=\"green\"\n                    id=\"live-search\"\n                  />\n                </Flex>\n              </Box>\n            </SimpleGrid>\n          </Box>\n        </Center>\n      </Box>\n    </>\n  );\n}\nexport default Movies;\n","import React from 'react';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport theme from './theme';\nimport Movies from './components/movies';\n// import { extendTheme } from '@chakra-ui/react';\n// import { ColorModeScript } from '@chakra-ui/react';\n\n// const config = {\n//   initialColorMode: 'dark',\n//   useSystemColorMode: false,\n// };\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <Movies></Movies>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\nimport theme from './theme';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}