{"version":3,"sources":["theme.js","api/movies.js","components/search.js","components/banner.js","media/poster_not_found.svg","components/InfoModal.js","components/movie.js","media/shopify.png","components/header.js","components/movies.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["theme","extendTheme","config","initialColorMode","useSystemColorMode","API_ENDPOINT","client","axios","create","baseURL","getMovies","currentPage","query","get","Search","loading","setQuery","liveSearch","useEffect","sendQuery","debounce","newQuery","height","width","pointerEvents","children","color","type","placeholder","onChange","e","target","value","length","hidden","isLoading","marginLeft","colorScheme","disabled","onClick","Banner","isOpen","in","bg","h","w","p","alignItems","justifyContent","as","InfoModal","onClose","title","movieId","useState","setLoading","movieDetails","setMovieDetails","genres","setGenres","posterURL","setPosterURL","getMovieDetails","then","res","response","data","Actors","Director","Plot","Rated","Runtime","Year","Language","Poster","console","log","Genre","split","maxW","isLoaded","mt","noOfLines","spacing","columns","direction","Object","keys","map","key","i","pb","src","imageNotFoundPoster","alt","display","genre","size","Movie","name","isNominated","id","year","nominateMovie","removeMovie","nominees","modalOpen","setModalOpen","initialScale","borderWidth","borderRadius","backgroundColor","textColor","marginTop","marginRight","icon","Close","Check","_hover","Info","Header","boxSize","shopify","Movies","localNominees","JSON","parse","localStorage","getItem","movies","setMovies","setNominees","page","setPage","totalResults","setTotalResults","currentPageStart","setCurrentPageStart","currentPageEnd","setCurrentPageEnd","notification","setNotification","setLiveSearch","toast","useToast","scrollbarProps","background","setItem","stringify","description","status","duration","isClosable","movieToNominate","find","movie","imdbID","Title","unnominateMovie","newNominees","removedNominee","remove","nominee","useCallback","apiGetMovies","trim","marginBottom","overflow","overflowX","overflowY","css","movieToFind","parseInt","htmlFor","defaultIsChecked","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.49c9b78f.chunk.js","sourcesContent":["import { extendTheme } from '@chakra-ui/react';\n\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: 'dark',\n  useSystemColorMode: false,\n};\n\n// 3. extend the theme\nconst theme = extendTheme({ config });\n\nexport default theme;\n","import axios from 'axios';\nconst API_ENDPOINT = 'https://www.omdbapi.com';\nconst client = axios.create({ baseURL: `${API_ENDPOINT}` });\n\nexport function getMovies(currentPage, query) {\n  return client.get(\n    `${API_ENDPOINT}/?s=${query}&apikey=8eda12ed&page=${currentPage}&type=movie`\n  );\n}\n\nexport function getMovieDetails(movieId) {\n  return client.get(`${API_ENDPOINT}/?i=${movieId}&apikey=8eda12ed&type=movie`);\n}\n","import { Box, InputGroup, InputLeftElement, Input } from '@chakra-ui/react';\nimport { Button } from '@chakra-ui/react';\nimport { SearchIcon } from '@chakra-ui/icons';\nimport { debounce } from 'lodash';\nimport { useEffect } from 'react';\nfunction Search({ loading, getMovies, query, setQuery, liveSearch }) {\n  useEffect(() => {\n    if (liveSearch && query) {\n      getMovies(1);\n    }\n  }, [query, liveSearch, getMovies]);\n\n  // only update search every 300 ms so use effect doesnt run\n  // every time an update is made to the search terms\n  const sendQuery = debounce(newQuery => {\n    setQuery(newQuery);\n  }, 300);\n\n  return (\n    <Box height=\"5vh\" width=\"100%\">\n      <InputGroup>\n        <InputLeftElement pointerEvents=\"none\" children={<SearchIcon color=\"gray\" />} />\n        <Input\n          type=\"text\"\n          placeholder=\"Title (4+ chars)\"\n          onChange={e => {\n            const newQuery = e.target.value;\n            if (newQuery.length > 3) {\n              sendQuery(newQuery);\n            }\n          }}\n        />\n        <Button\n          type=\"submit\"\n          hidden={liveSearch}\n          isLoading={loading}\n          marginLeft={5}\n          colorScheme=\"green\"\n          disabled={query.length < 3}\n          onClick={() => getMovies(1)}\n        >\n          Search\n        </Button>\n      </InputGroup>\n    </Box>\n  );\n}\nexport default Search;\n","import { Box } from '@chakra-ui/layout';\nimport { Fade, Text, Flex } from '@chakra-ui/react';\n\nfunction Banner({ isOpen }) {\n  return (\n    <Fade in={isOpen}>\n      <Box bg=\"#9ae7b5\" h=\"4vh\" w=\"100%\" p={2}>\n        <Flex alignItems=\"center\" justifyContent=\"center\">\n          <Text as=\"h4\" color=\"black\">\n            You've nominated 5 movies. Congrats!\n          </Text>\n        </Flex>\n      </Box>\n    </Fade>\n  );\n}\nexport default Banner;\n","export default __webpack_public_path__ + \"static/media/poster_not_found.076546b9.svg\";","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n} from '@chakra-ui/modal';\nimport { Tag, TagLabel, Spacer } from '@chakra-ui/react';\nimport { Text, SimpleGrid } from '@chakra-ui/react';\nimport { SkeletonText, Box, Image, Flex, HStack } from '@chakra-ui/react';\nimport { useState, useEffect } from 'react';\nimport { getMovieDetails } from '../api/movies';\nimport imageNotFoundPoster from '../media/poster_not_found.svg';\n\nfunction InfoModal({ isOpen, onClose, title, movieId }) {\n  const [isLoading, setLoading] = useState(true);\n  const [movieDetails, setMovieDetails] = useState({});\n  const [genres, setGenres] = useState([]);\n  const [posterURL, setPosterURL] = useState('');\n  useEffect(() => {\n    if (isOpen) {\n      getMovieDetails(movieId).then(res => {\n        const response = res.data;\n        const movieDetails = {};\n        movieDetails['Actors'] = response.Actors;\n        movieDetails['Director'] = response.Director;\n        movieDetails['Plot'] = response.Plot;\n        movieDetails['Rating'] = response.Rated;\n        movieDetails['Runtime'] = response.Runtime;\n        movieDetails['Year'] = response.Year;\n        movieDetails['Language'] = response.Language;\n        setPosterURL(response.Poster);\n        console.log(response.Poster);\n        setGenres(response.Genre.split(','));\n        setMovieDetails(movieDetails);\n        setLoading(false);\n      });\n    }\n  }, [isOpen, movieId]);\n\n  return (\n    <Modal onClose={onClose} isOpen={isOpen}>\n      <ModalOverlay />\n\n      <ModalContent maxW=\"45rem\">\n        <ModalCloseButton />\n\n        <ModalHeader>{title}</ModalHeader>\n\n        {isLoading && (\n          <SkeletonText p={5} isLoaded={!isLoading} mt=\"4\" noOfLines={20} spacing=\"4\" />\n        )}\n\n        <ModalBody>\n          <SimpleGrid columns={[1, null, 2]} spacing={5}>\n            <Flex direction=\"column\" justifyContent=\"center\">\n              {Object.keys(movieDetails).map((key, i) => {\n                return (\n                  <Box pb={5}>\n                    <Text as=\"b\">{key}: </Text> {movieDetails[key]} <br />\n                  </Box>\n                );\n              })}\n            </Flex>\n            <Flex alignItems=\"center\" justifyContent=\"center\">\n              <Image src={posterURL !== 'N/A' ? posterURL : imageNotFoundPoster} alt=\"\" />\n            </Flex>\n          </SimpleGrid>\n        </ModalBody>\n        <ModalFooter display=\"flex\">\n          <HStack>\n            {genres &&\n              genres.map(genre => (\n                <Tag size=\"lg\" key={genre} colorScheme=\"gray\">\n                  <TagLabel>{genre}</TagLabel>\n                </Tag>\n              ))}\n          </HStack>\n          <Spacer></Spacer>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\nexport default InfoModal;\n","import { Box, Flex, Heading, IconButton, Spacer } from '@chakra-ui/react';\nimport { CheckIcon, CloseIcon, InfoIcon } from '@chakra-ui/icons';\nimport { ScaleFade } from '@chakra-ui/react';\nimport { useState } from 'react';\nimport InfoModal from './InfoModal';\nfunction Movie({ name, isNominated, id, year, nominateMovie, removeMovie, nominees }) {\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const removeOrNominateMovie = () => {\n    if (nominees) {\n      removeMovie(id);\n    } else {\n      nominateMovie(id);\n    }\n  };\n\n  return (\n    <ScaleFade initialScale={0.9} in={true}>\n      <InfoModal\n        isOpen={modalOpen}\n        onClose={() => setModalOpen(false)}\n        title={name}\n        movieId={id}\n      ></InfoModal>\n      <Box\n        borderWidth=\"1px\"\n        borderRadius=\"md\"\n        backgroundColor=\"white\"\n        textColor=\"black\"\n        p={5}\n        marginTop={6}\n        width=\"95%\"\n      >\n        <Flex alignItems=\"center\">\n          <Heading p={2} size=\"md\">\n            {name} ({year})\n          </Heading>\n          <Spacer />\n\n          <IconButton\n            marginRight={1}\n            colorScheme={nominees ? 'red' : 'green'}\n            icon={nominees ? <CloseIcon /> : <CheckIcon />}\n            disabled={!nominees && isNominated}\n            onClick={() => {\n              removeOrNominateMovie();\n            }}\n          />\n          <IconButton\n            _hover={{ bg: 'gray.500' }}\n            backgroundColor=\"gray.400\"\n            icon={<InfoIcon></InfoIcon>}\n            disabled={!nominees && isNominated}\n            onClick={() => {\n              setModalOpen(true);\n            }}\n          />\n        </Flex>\n      </Box>\n    </ScaleFade>\n  );\n}\nexport default Movie;\n","export default __webpack_public_path__ + \"static/media/shopify.a42f997c.png\";","import { Flex, Heading, Spacer } from '@chakra-ui/react';\nimport shopify from '../media/shopify.png';\nimport { Image } from '@chakra-ui/react';\nfunction Header() {\n  return (\n    <Flex height=\"8vh\" width=\"100%\" alignItems=\"center\" pb={5}>\n      <Heading as=\"h1\">Welcome to The Shoppies!</Heading>\n      <Spacer></Spacer>\n      <Flex alignItems=\"center\" boxSize=\"100px\">\n        <Image src={shopify} alt=\"shopify logo\" />\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default Header;\n","import { useState, useEffect, useCallback } from 'react';\nimport { getMovies as apiGetMovies } from '../api/movies';\nimport Search from './search';\nimport Banner from './banner';\nimport find from 'lodash.find';\nimport remove from 'lodash.remove';\nimport { useToast } from '@chakra-ui/react';\nimport { Skeleton } from '@chakra-ui/react';\nimport Movie from './movie';\nimport Header from './header';\nimport {\n  Box,\n  SimpleGrid,\n  Heading,\n  Center,\n  Flex,\n  Spacer,\n  Button,\n  FormLabel,\n  Text,\n  Switch,\n} from '@chakra-ui/react';\n\nfunction Movies() {\n  const localNominees = JSON.parse(localStorage.getItem('nominees')) || [];\n  const [movies, setMovies] = useState([]);\n  const [nominees, setNominees] = useState(localNominees);\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [totalResults, setTotalResults] = useState(0);\n  const [currentPageStart, setCurrentPageStart] = useState(0);\n  const [currentPageEnd, setCurrentPageEnd] = useState(0);\n  const [query, setQuery] = useState('');\n  const [notification, setNotification] = useState(false);\n  const [liveSearch, setLiveSearch] = useState(true);\n  const toast = useToast();\n  const scrollbarProps = {\n    '&::-webkit-scrollbar': {\n      width: '4px',\n    },\n    '&::-webkit-scrollbar-track': {\n      width: '6px',\n    },\n    '&::-webkit-scrollbar-thumb': {\n      background: 'white',\n      borderRadius: '24px',\n    },\n  };\n  useEffect(() => {\n    localStorage.setItem('nominees', JSON.stringify(nominees));\n    if (nominees.length === 5) {\n      setNotification(true);\n    } else {\n      setNotification(false);\n    }\n  }, [nominees]);\n\n  useEffect(() => {\n    setCurrentPageStart(10 * page - 9);\n    setCurrentPageEnd(10 * page - 10 + movies.length);\n  }, [page, movies]);\n\n  const nominateMovie = id => {\n    if (nominees.length === 5) {\n      toast({\n        title: 'No more nominations available.',\n        description: \"You've already nominated 5 movies!\",\n        status: 'error',\n        duration: 1000,\n        isClosable: true,\n      });\n    } else {\n      const movieToNominate = find(movies, function (movie) {\n        return movie.imdbID === id;\n      });\n      toast({\n        title: 'Nominee added.',\n        description: \"You've added '\" + movieToNominate.Title + \"' to your nominations\",\n        status: 'success',\n        duration: 1000,\n        isClosable: true,\n      });\n      setNominees([...nominees, movieToNominate]);\n    }\n  };\n\n  const unnominateMovie = id => {\n    const newNominees = [...nominees];\n    const removedNominee = remove(newNominees, nominee => nominee.imdbID === id)[0];\n    setNominees([...newNominees]);\n    toast({\n      title: 'Nominee removed.',\n      description: \"You've removed '\" + removedNominee.Title + \"' from your nominations\",\n      status: 'success',\n      duration: 1000,\n      isClosable: true,\n    });\n  };\n\n  const getMovies = useCallback(\n    (currentPage = 1) => {\n      setLoading(true);\n      setPage(currentPage);\n      apiGetMovies(currentPage, query.trim()).then(res => {\n        let movies = res.data.Search;\n        setTotalResults(res.data.totalResults);\n        if (movies) {\n          setMovies(movies);\n        } else {\n          toast({\n            title: 'No results found.',\n            description: \"Couldn't find any movies with that search criteria.\",\n            status: 'error',\n            duration: 2000,\n            isClosable: true,\n          });\n          setMovies([]);\n        }\n        setLoading(false);\n      });\n    },\n    [query, toast]\n  );\n\n  return (\n    <Box width=\"100%\">\n      <Banner isOpen={notification}></Banner>\n      <Center>\n        <Flex direction=\"column\" p={10} width=\"90%\">\n          <Header></Header>\n          <Search\n            loading={loading}\n            getMovies={getMovies}\n            query={query}\n            setQuery={setQuery}\n            liveSearch={liveSearch}\n          ></Search>\n          <SimpleGrid columns={[1, null, 2]} spacing={5}>\n            <Box marginTop={5} marginBottom={5}>\n              <Heading as=\"h2\" size=\"lg\">\n                {movies.length > 0 &&\n                  !loading &&\n                  'Search results ' +\n                    ' (' +\n                    currentPageStart +\n                    '-' +\n                    currentPageEnd +\n                    ' of ' +\n                    totalResults +\n                    ')'}\n                {(movies.length === 0 || loading) && 'Movies'}\n              </Heading>\n              <Box\n                height=\"60vh\"\n                overflow=\"scroll\"\n                overflowX=\"hidden\"\n                overflowY=\"auto\"\n                css={scrollbarProps}\n              >\n                <Skeleton isLoaded={!loading}>\n                  {movies.map(movie => (\n                    <Movie\n                      key={movie.imdbID}\n                      name={movie.Title}\n                      year={movie.Year}\n                      id={movie.imdbID}\n                      nominateMovie={nominateMovie}\n                      nominees={false}\n                      isNominated={find(nominees, function (movieToFind) {\n                        return movieToFind.imdbID === movie.imdbID;\n                      })}\n                    ></Movie>\n                  ))}\n                </Skeleton>\n              </Box>\n              <Flex hidden={movies.length === 0} mt={3} alignItems=\"center\">\n                <Button\n                  disabled={page === 1}\n                  colorScheme=\"green\"\n                  onClick={() => {\n                    getMovies(page - 1);\n                  }}\n                >\n                  Back\n                </Button>\n                <Spacer />\n                <Button\n                  disabled={currentPageEnd === parseInt(totalResults)}\n                  colorScheme=\"green\"\n                  onClick={() => {\n                    getMovies(page + 1);\n                  }}\n                >\n                  Next\n                </Button>\n              </Flex>\n            </Box>\n            <Box marginTop={5} marginBottom={5}>\n              <Heading size=\"lg\">My Nominations ({nominees.length}/5)</Heading>\n              <Box\n                height=\"60vh\"\n                overflow=\"scroll\"\n                overflowX=\"hidden\"\n                overflowY=\"auto\"\n                css={scrollbarProps}\n              >\n                {nominees.map(movie => (\n                  <Movie\n                    key={movie.imdbID}\n                    name={movie.Title}\n                    year={movie.Year}\n                    id={movie.imdbID}\n                    isNominated\n                    nominees={true}\n                    removeMovie={unnominateMovie}\n                  ></Movie>\n                ))}\n              </Box>\n\n              <Flex mt={3}>\n                <Spacer />\n                <FormLabel htmlFor=\"live-search\">\n                  <Text> Live Search?</Text>\n                </FormLabel>\n                <Switch\n                  defaultIsChecked\n                  value={liveSearch}\n                  onChange={e => {\n                    setLiveSearch(!liveSearch);\n                  }}\n                  colorScheme=\"green\"\n                  id=\"live-search\"\n                />\n              </Flex>\n\n              {/* <Flex position=\"absolute\" right={5} mt=\"5vh\" alignItems=\"center\">\n                <FormLabel htmlFor=\"live-search\">\n                  <Text> Live Search?</Text>\n                </FormLabel>\n                <Switch\n                  defaultIsChecked\n                  value={liveSearch}\n                  onChange={e => {\n                    setLiveSearch(!liveSearch);\n                  }}\n                  colorScheme=\"green\"\n                  id=\"live-search\"\n                />\n              </Flex> */}\n            </Box>\n          </SimpleGrid>\n        </Flex>\n      </Center>\n    </Box>\n  );\n}\nexport default Movies;\n","import React from 'react';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport theme from './theme';\nimport Movies from './components/movies';\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <Movies></Movies>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\nimport theme from './theme';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}